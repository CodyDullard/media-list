{"version":3,"sources":["components/MediaView.js","components/SearchView.js","components/MainPage.js","App.js","index.js"],"names":["backdrop","SearchView","props","updateQuery","event","setState","query","target","value","submitHandler","preventDefault","search","state","id","onSubmit","this","type","onChange","name","placeholder","Component","MediaView","DisplayMediaData","media","data","document","body","style","backgroundImage","poster","poster_path","backdrop_path","genres","extractStrings","undefined","runtime","productionCompanies","production_companies","revenue","toLocaleString","alt","src","className","title","tagline","overview","release_date","vote_average","networks","createdBy","created_by","length","first_air_date","number_of_seasons","arr","stringList","forEach","element","push","join","MainPage","a","getMedia","results","generateTable","view","table","mediaData","bind","CurView","url","process","fetch","response","json","rows","count","curRow","item","altText","role","onClick","getMediaView","media_type","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.73970643.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './styles/mediaView.css';\nlet backdrop;\n\nclass MediaView extends Component {\n    render() {\n        return (\n            <DisplayMediaData media={this.props.data}/>\n        )\n    }\n\n    componentDidMount() {\n        document.body.style.backgroundImage = 'url(' + backdrop + ')';\n    }\n}\n\nfunction DisplayMediaData(props) {\n    const media = props.media\n    const poster = 'https://image.tmdb.org/t/p/original' + media.poster_path\n    backdrop = 'https://image.tmdb.org/t/p/original' + media.backdrop_path\n    const genres = extractStrings(media.genres)\n    if (media.runtime !== undefined) {\n        const productionCompanies = extractStrings(media.production_companies);\n        const revenue = (media.revenue !== 0) ? \"$\" + media.revenue.toLocaleString() : \"no info availiable\";\n        return (\n            <div id='view-container'>\n                <div id='poster-container'>\n                    <img alt='The movie poster for the current movie' id='poster' src={poster}/>\n                </div>\n                <div id='text-container'>\n                    <h1 className=\"special-text\">{media.title}</h1>\n                    <h4 className=\"special-text\">{media.tagline}</h4>\n                    <p>{media.overview}</p>\n                    <p className=\"special-text\">{genres}</p>\n                    <p><span className=\"special-text\">Released on:</span> {media.release_date}</p>\n                    <p><span className=\"special-text\">Runtime:</span> {media.runtime} mins</p>\n                    <p><span className=\"special-text\">Revenue:</span> {revenue}</p>\n                    <p><span className=\"special-text\">Runtime:</span> {media.runtime}</p>\n                    <p><span className=\"special-text\">Rating(TMDB):</span> {media.vote_average}</p>\n                    <p>{productionCompanies}</p>\n                </div>\n            </div>\n        )\n    }\n    else {\n        const productionCompanies = extractStrings(media.networks);\n        const createdBy = (media.created_by.length > 0) ? extractStrings(media.created_by) : \"no info available\";\n        return (\n            <div id='view-container'>\n                <div id='poster-container'>\n                    <img alt='The movie poster for the current movie' id='poster' src={poster}/>\n                </div>\n                <div id='text-container'>\n                    <h1 className=\"special-text\">{media.name}</h1>\n                    <h4 className=\"special-text\">{media.tagline}</h4>\n                    <p>{media.overview}</p>\n                    <p className=\"special-text\">{genres}</p>\n                    <p><span className=\"special-text\">First aired on:</span> {media.first_air_date}</p>\n                    <p><span className=\"special-text\">Seasons:</span> {media.number_of_seasons}</p>\n                    <p><span className=\"special-text\">Rating(TMDB):</span> {media.vote_average}</p>\n                    <p><span className=\"special-text\">Creator(s):</span> {createdBy}</p>\n                    <p>{productionCompanies}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction extractStrings(arr) {\n    let stringList = [];\n    if (arr !== undefined) {\n        arr.forEach(element => {\n            stringList.push(element.name);\n        });\n    }\n    return stringList.join(', ');\n}\n\nexport { MediaView };","import React, { Component } from 'react';\nimport './styles/searchView.css';\n\nclass SearchView extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            query: \"\",\n        };\n    }\n\n    updateQuery = (event) => {\n        this.setState({\n            query: event.target.value\n        });\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.search(this.state.query);\n    }\n\n    render() {\n        return (\n            <div id='search-container'>\n                <form onSubmit={this.submitHandler}>\n                    <input type='text' onChange={this.updateQuery} name=\"query\" value={this.state.query} placeholder='Search for movie or tv show'/>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport { SearchView }; ","import React, { Component } from 'react';\nimport { SearchView } from './SearchView'\nimport {MediaView} from './MediaView';\nimport './styles/mainPage.css';\n\nclass MainPage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            view: \"search\",\n            table: null,\n            mediaData: null\n        }\n\n        this.search = this.search.bind(this)\n    }\n\n    render() {\n        return (\n            <div>\n                <SearchView search= { this.search }/>\n                <CurView view={this.state.view} table={this.state.table} mediaData={this.state.mediaData}/>\n            </div>\n            \n        )\n    }\n\n    async getMediaView(id, type) {\n        let url = `http://api.themoviedb.org/3/${type}/${id}?api_key=${process.env.REACT_APP_API_KEY}&lang=en-US`;\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({\n            view: \"media\",\n            mediaData: data\n        })\n    }\n\n    async getMedia(query) {\n        let url;\n        if (query === \"\") {\n            url = `https://api.themoviedb.org/3/trending/all/week?api_key=${process.env.REACT_APP_API_KEY}`;\n        }\n        else {\n            url = `http://api.themoviedb.org/3/search/multi?api_key=${process.env.REACT_APP_API_KEY}&lang=en-US&query=${query}`;\n        }\n        const response = await fetch(url);\n        const data = await response.json();\n        return data.results;\n    }\n\n    search = async (query) => {\n        const results = await this.getMedia(query)\n        this.generateTable(results)\n    }\n\n    generateTable(media) {\n        let rows = [];\n        let count = 0;\n        let curRow = [];\n        for (let item of media) {\n            const poster = `https://image.tmdb.org/t/p/w500/${item.poster_path}`;\n            const altText = (item.title !== undefined) ? item.title : item.name;\n            curRow.push(<td><img alt={altText} role=\"button\" src={poster} onClick={() => this.getMediaView(item.id, item.media_type)}/></td>)\n            count++;\n            if (count === 4) {\n                rows.push(<tr>{curRow}</tr>)\n                count = 0;\n                curRow = [];\n            }\n        }\n        this.setState({\n            view: \"search\",\n            table: <tbody>{rows}</tbody>\n        })\n    }\n    \n    // getMedia(url) {\n    //     fetch(url).then((res) => res.json()).then((data) => {\n    //         this.setState({\n    //             mediaId: data.id,\n    //             title: data.title,\n    //             tagline: data.tagline,\n    //             description: data.overview,\n    //             genres: data.genres,\n    //             releaseDate: data.release_date,\n    //             productionCompanies: data.production_companies,\n    //             poster: data.poster_path,\n    //             backdrop: data.backdrop_path\n    //         })\n    //     })\n    // }\n\n    async componentDidMount() {\n        let url = `https://api.themoviedb.org/3/trending/all/week?api_key=${process.env.REACT_APP_API_KEY}`\n        const response = await fetch(url);\n        const data = await response.json();\n        this.generateTable(data.results);\n    }\n}\n\nfunction CurView(props) {\n    if (props.view === \"search\") {\n        document.body.style.backgroundImage = 'none';\n        return(\n            <div id='media-results'>\n                <table>\n                    {props.table}\n                </table>\n            </div>\n        )\n    }\n    else {\n        return( <MediaView data={props.mediaData}/> )\n    }\n}\n\nexport { MainPage };","import React from 'react';\nimport { MainPage } from './components/MainPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}